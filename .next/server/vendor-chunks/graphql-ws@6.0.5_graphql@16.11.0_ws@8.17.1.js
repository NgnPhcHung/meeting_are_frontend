"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/graphql-ws@6.0.5_graphql@16.11.0_ws@8.17.1";
exports.ids = ["vendor-chunks/graphql-ws@6.0.5_graphql@16.11.0_ws@8.17.1"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/graphql-ws@6.0.5_graphql@16.11.0_ws@8.17.1/node_modules/graphql-ws/dist/client.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/graphql-ws@6.0.5_graphql@16.11.0_ws@8.17.1/node_modules/graphql-ws/dist/client.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CloseCode: () => (/* reexport safe */ _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.C),\n/* harmony export */   DEPRECATED_GRAPHQL_WS_PROTOCOL: () => (/* reexport safe */ _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.D),\n/* harmony export */   GRAPHQL_TRANSPORT_WS_PROTOCOL: () => (/* reexport safe */ _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.G),\n/* harmony export */   MessageType: () => (/* reexport safe */ _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.M),\n/* harmony export */   TerminatedCloseEvent: () => (/* binding */ TerminatedCloseEvent),\n/* harmony export */   createClient: () => (/* binding */ createClient),\n/* harmony export */   parseMessage: () => (/* reexport safe */ _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.p),\n/* harmony export */   stringifyMessage: () => (/* reexport safe */ _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.s),\n/* harmony export */   validateMessage: () => (/* reexport safe */ _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.v)\n/* harmony export */ });\n/* harmony import */ var _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common-CGW11Fyb.js */ \"(ssr)/./node_modules/.pnpm/graphql-ws@6.0.5_graphql@16.11.0_ws@8.17.1/node_modules/graphql-ws/dist/common-CGW11Fyb.js\");\n\n\n\nfunction createClient(options) {\n  const {\n    url,\n    connectionParams,\n    lazy = true,\n    onNonLazyError = console.error,\n    lazyCloseTimeout: lazyCloseTimeoutMs = 0,\n    keepAlive = 0,\n    disablePong,\n    connectionAckWaitTimeout = 0,\n    retryAttempts = 5,\n    retryWait = async function randomisedExponentialBackoff(retries2) {\n      const retryDelaySeconds = Math.pow(2, retries2);\n      await new Promise(\n        (resolve) => setTimeout(\n          resolve,\n          retryDelaySeconds * 1e3 + // add random timeout from 300ms to 3s\n          Math.floor(Math.random() * (3e3 - 300) + 300)\n        )\n      );\n    },\n    shouldRetry = isLikeCloseEvent,\n    on,\n    webSocketImpl,\n    /**\n     * Generates a v4 UUID to be used as the ID using `Math`\n     * as the random number generator. Supply your own generator\n     * in case you need more uniqueness.\n     *\n     * Reference: https://gist.github.com/jed/982883\n     */\n    generateID = function generateUUID() {\n      return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) => {\n        const r = Math.random() * 16 | 0, v = c == \"x\" ? r : r & 3 | 8;\n        return v.toString(16);\n      });\n    },\n    jsonMessageReplacer: replacer,\n    jsonMessageReviver: reviver\n  } = options;\n  let ws;\n  if (webSocketImpl) {\n    if (!isWebSocket(webSocketImpl)) {\n      throw new Error(\"Invalid WebSocket implementation provided\");\n    }\n    ws = webSocketImpl;\n  } else if (typeof WebSocket !== \"undefined\") {\n    ws = WebSocket;\n  } else if (typeof global !== \"undefined\") {\n    ws = global.WebSocket || // @ts-expect-error: Support more browsers\n    global.MozWebSocket;\n  } else if (typeof window !== \"undefined\") {\n    ws = window.WebSocket || // @ts-expect-error: Support more browsers\n    window.MozWebSocket;\n  }\n  if (!ws)\n    throw new Error(\n      \"WebSocket implementation missing; on Node you can `import WebSocket from 'ws';` and pass `webSocketImpl: WebSocket` to `createClient`\"\n    );\n  const WebSocketImpl = ws;\n  const emitter = (() => {\n    const message = /* @__PURE__ */ (() => {\n      const listeners2 = {};\n      return {\n        on(id, listener) {\n          listeners2[id] = listener;\n          return () => {\n            delete listeners2[id];\n          };\n        },\n        emit(message2) {\n          if (\"id\" in message2) listeners2[message2.id]?.(message2);\n        }\n      };\n    })();\n    const listeners = {\n      connecting: on?.connecting ? [on.connecting] : [],\n      opened: on?.opened ? [on.opened] : [],\n      connected: on?.connected ? [on.connected] : [],\n      ping: on?.ping ? [on.ping] : [],\n      pong: on?.pong ? [on.pong] : [],\n      message: on?.message ? [message.emit, on.message] : [message.emit],\n      closed: on?.closed ? [on.closed] : [],\n      error: on?.error ? [on.error] : []\n    };\n    return {\n      onMessage: message.on,\n      on(event, listener) {\n        const l = listeners[event];\n        l.push(listener);\n        return () => {\n          l.splice(l.indexOf(listener), 1);\n        };\n      },\n      emit(event, ...args) {\n        for (const listener of [...listeners[event]]) {\n          listener(...args);\n        }\n      }\n    };\n  })();\n  function errorOrClosed(cb) {\n    const listening = [\n      // errors are fatal and more critical than close events, throw them first\n      emitter.on(\"error\", (err) => {\n        listening.forEach((unlisten) => unlisten());\n        cb(err);\n      }),\n      // closes can be graceful and not fatal, throw them second (if error didnt throw)\n      emitter.on(\"closed\", (event) => {\n        listening.forEach((unlisten) => unlisten());\n        cb(event);\n      })\n    ];\n  }\n  let connecting, locks = 0, lazyCloseTimeout, retrying = false, retries = 0, disposed = false;\n  async function connect() {\n    clearTimeout(lazyCloseTimeout);\n    const [socket, throwOnClose] = await (connecting ?? (connecting = new Promise(\n      (connected, denied) => (async () => {\n        if (retrying) {\n          await retryWait(retries);\n          if (!locks) {\n            connecting = undefined;\n            return denied({ code: 1e3, reason: \"All Subscriptions Gone\" });\n          }\n          retries++;\n        }\n        emitter.emit(\"connecting\", retrying);\n        const socket2 = new WebSocketImpl(\n          typeof url === \"function\" ? await url() : url,\n          _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.G\n        );\n        let connectionAckTimeout, queuedPing;\n        function enqueuePing() {\n          if (isFinite(keepAlive) && keepAlive > 0) {\n            clearTimeout(queuedPing);\n            queuedPing = setTimeout(() => {\n              if (socket2.readyState === WebSocketImpl.OPEN) {\n                socket2.send((0,_common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.s)({ type: _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.M.Ping }));\n                emitter.emit(\"ping\", false, undefined);\n              }\n            }, keepAlive);\n          }\n        }\n        errorOrClosed((errOrEvent) => {\n          connecting = undefined;\n          clearTimeout(connectionAckTimeout);\n          clearTimeout(queuedPing);\n          denied(errOrEvent);\n          if (errOrEvent instanceof TerminatedCloseEvent) {\n            socket2.close(4499, \"Terminated\");\n            socket2.onerror = null;\n            socket2.onclose = null;\n          }\n        });\n        socket2.onerror = (err) => emitter.emit(\"error\", err);\n        socket2.onclose = (event) => emitter.emit(\"closed\", event);\n        socket2.onopen = async () => {\n          try {\n            emitter.emit(\"opened\", socket2);\n            const payload = typeof connectionParams === \"function\" ? await connectionParams() : connectionParams;\n            if (socket2.readyState !== WebSocketImpl.OPEN) return;\n            socket2.send(\n              (0,_common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.s)(\n                payload ? {\n                  type: _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.M.ConnectionInit,\n                  payload\n                } : {\n                  type: _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.M.ConnectionInit\n                  // payload is completely absent if not provided\n                },\n                replacer\n              )\n            );\n            if (isFinite(connectionAckWaitTimeout) && connectionAckWaitTimeout > 0) {\n              connectionAckTimeout = setTimeout(() => {\n                socket2.close(\n                  _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.C.ConnectionAcknowledgementTimeout,\n                  \"Connection acknowledgement timeout\"\n                );\n              }, connectionAckWaitTimeout);\n            }\n            enqueuePing();\n          } catch (err) {\n            emitter.emit(\"error\", err);\n            socket2.close(\n              _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.C.InternalClientError,\n              (0,_common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.l)(\n                err instanceof Error ? err.message : String(err),\n                \"Internal client error\"\n              )\n            );\n          }\n        };\n        let acknowledged = false;\n        socket2.onmessage = ({ data }) => {\n          try {\n            const message = (0,_common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.p)(data, reviver);\n            emitter.emit(\"message\", message);\n            if (message.type === \"ping\" || message.type === \"pong\") {\n              emitter.emit(message.type, true, message.payload);\n              if (message.type === \"pong\") {\n                enqueuePing();\n              } else if (!disablePong) {\n                socket2.send(\n                  (0,_common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.s)(\n                    message.payload ? {\n                      type: _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.M.Pong,\n                      payload: message.payload\n                    } : {\n                      type: _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.M.Pong\n                      // payload is completely absent if not provided\n                    }\n                  )\n                );\n                emitter.emit(\"pong\", false, message.payload);\n              }\n              return;\n            }\n            if (acknowledged) return;\n            if (message.type !== _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.M.ConnectionAck)\n              throw new Error(\n                `First message cannot be of type ${message.type}`\n              );\n            clearTimeout(connectionAckTimeout);\n            acknowledged = true;\n            emitter.emit(\"connected\", socket2, message.payload, retrying);\n            retrying = false;\n            retries = 0;\n            connected([\n              socket2,\n              new Promise((_, reject) => errorOrClosed(reject))\n            ]);\n          } catch (err) {\n            socket2.onmessage = null;\n            emitter.emit(\"error\", err);\n            socket2.close(\n              _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.C.BadResponse,\n              (0,_common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.l)(\n                err instanceof Error ? err.message : String(err),\n                \"Bad response\"\n              )\n            );\n          }\n        };\n      })()\n    )));\n    if (socket.readyState === WebSocketImpl.CLOSING) await throwOnClose;\n    let release = () => {\n    };\n    const released = new Promise((resolve) => release = resolve);\n    return [\n      socket,\n      release,\n      Promise.race([\n        // wait for\n        released.then(() => {\n          if (!locks) {\n            const complete = () => socket.close(1e3, \"Normal Closure\");\n            if (isFinite(lazyCloseTimeoutMs) && lazyCloseTimeoutMs > 0) {\n              lazyCloseTimeout = setTimeout(() => {\n                if (socket.readyState === WebSocketImpl.OPEN) complete();\n              }, lazyCloseTimeoutMs);\n            } else {\n              complete();\n            }\n          }\n        }),\n        // or\n        throwOnClose\n      ])\n    ];\n  }\n  function shouldRetryConnectOrThrow(errOrCloseEvent) {\n    if (isLikeCloseEvent(errOrCloseEvent) && (isFatalInternalCloseCode(errOrCloseEvent.code) || [\n      _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.C.InternalServerError,\n      _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.C.InternalClientError,\n      _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.C.BadRequest,\n      _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.C.BadResponse,\n      _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.C.Unauthorized,\n      // CloseCode.Forbidden, might grant access out after retry\n      _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.C.SubprotocolNotAcceptable,\n      // CloseCode.ConnectionInitialisationTimeout, might not time out after retry\n      // CloseCode.ConnectionAcknowledgementTimeout, might not time out after retry\n      _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.C.SubscriberAlreadyExists,\n      _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.C.TooManyInitialisationRequests\n      // 4499, // Terminated, probably because the socket froze, we want to retry\n    ].includes(errOrCloseEvent.code)))\n      throw errOrCloseEvent;\n    if (disposed) return false;\n    if (isLikeCloseEvent(errOrCloseEvent) && errOrCloseEvent.code === 1e3)\n      return locks > 0;\n    if (!retryAttempts || retries >= retryAttempts) throw errOrCloseEvent;\n    if (!shouldRetry(errOrCloseEvent)) throw errOrCloseEvent;\n    return retrying = true;\n  }\n  if (!lazy) {\n    (async () => {\n      locks++;\n      for (; ; ) {\n        try {\n          const [, , throwOnClose] = await connect();\n          await throwOnClose;\n        } catch (errOrCloseEvent) {\n          try {\n            if (!shouldRetryConnectOrThrow(errOrCloseEvent)) return;\n          } catch (errOrCloseEvent2) {\n            return onNonLazyError?.(errOrCloseEvent2);\n          }\n        }\n      }\n    })();\n  }\n  function subscribe(payload, sink) {\n    const id = generateID(payload);\n    let done = false, errored = false, releaser = () => {\n      locks--;\n      done = true;\n    };\n    (async () => {\n      locks++;\n      for (; ; ) {\n        try {\n          const [socket, release, waitForReleaseOrThrowOnClose] = await connect();\n          if (done) return release();\n          const unlisten = emitter.onMessage(id, (message) => {\n            switch (message.type) {\n              case _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.M.Next: {\n                sink.next(message.payload);\n                return;\n              }\n              case _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.M.Error: {\n                errored = true, done = true;\n                sink.error(message.payload);\n                releaser();\n                return;\n              }\n              case _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.M.Complete: {\n                done = true;\n                releaser();\n                return;\n              }\n            }\n          });\n          socket.send(\n            (0,_common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.s)(\n              {\n                id,\n                type: _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.M.Subscribe,\n                payload\n              },\n              replacer\n            )\n          );\n          releaser = () => {\n            if (!done && socket.readyState === WebSocketImpl.OPEN)\n              socket.send(\n                (0,_common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.s)(\n                  {\n                    id,\n                    type: _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.M.Complete\n                  },\n                  replacer\n                )\n              );\n            locks--;\n            done = true;\n            release();\n          };\n          await waitForReleaseOrThrowOnClose.finally(unlisten);\n          return;\n        } catch (errOrCloseEvent) {\n          if (!shouldRetryConnectOrThrow(errOrCloseEvent)) return;\n        }\n      }\n    })().then(() => {\n      if (!errored) sink.complete();\n    }).catch((err) => {\n      sink.error(err);\n    });\n    return () => {\n      if (!done) releaser();\n    };\n  }\n  return {\n    on: emitter.on,\n    subscribe,\n    iterate(request) {\n      const pending = [];\n      const deferred = {\n        done: false,\n        error: null,\n        resolve: () => {\n        }\n      };\n      const dispose = subscribe(request, {\n        next(val) {\n          pending.push(val);\n          deferred.resolve();\n        },\n        error(err) {\n          deferred.done = true;\n          deferred.error = err;\n          deferred.resolve();\n        },\n        complete() {\n          deferred.done = true;\n          deferred.resolve();\n        }\n      });\n      const iterator = async function* iterator2() {\n        for (; ; ) {\n          if (!pending.length) {\n            await new Promise((resolve) => deferred.resolve = resolve);\n          }\n          while (pending.length) {\n            yield pending.shift();\n          }\n          if (deferred.error) {\n            throw deferred.error;\n          }\n          if (deferred.done) {\n            return;\n          }\n        }\n      }();\n      iterator.throw = async (err) => {\n        if (!deferred.done) {\n          deferred.done = true;\n          deferred.error = err;\n          deferred.resolve();\n        }\n        return { done: true, value: undefined };\n      };\n      iterator.return = async () => {\n        dispose();\n        return { done: true, value: undefined };\n      };\n      return iterator;\n    },\n    async dispose() {\n      disposed = true;\n      if (connecting) {\n        const [socket] = await connecting;\n        socket.close(1e3, \"Normal Closure\");\n      }\n    },\n    terminate() {\n      if (connecting) {\n        emitter.emit(\"closed\", new TerminatedCloseEvent());\n      }\n    }\n  };\n}\nclass TerminatedCloseEvent extends Error {\n  name = \"TerminatedCloseEvent\";\n  message = \"4499: Terminated\";\n  code = 4499;\n  reason = \"Terminated\";\n  wasClean = false;\n}\nfunction isLikeCloseEvent(val) {\n  return (0,_common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.i)(val) && \"code\" in val && \"reason\" in val;\n}\nfunction isFatalInternalCloseCode(code) {\n  if ([\n    1e3,\n    // Normal Closure is not an erroneous close code\n    1001,\n    // Going Away\n    1006,\n    // Abnormal Closure\n    1005,\n    // No Status Received\n    1012,\n    // Service Restart\n    1013,\n    // Try Again Later\n    1014\n    // Bad Gateway\n  ].includes(code))\n    return false;\n  return code >= 1e3 && code <= 1999;\n}\nfunction isWebSocket(val) {\n  return typeof val === \"function\" && \"constructor\" in val && \"CLOSED\" in val && \"CLOSING\" in val && \"CONNECTING\" in val && \"OPEN\" in val;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/graphql-ws@6.0.5_graphql@16.11.0_ws@8.17.1/node_modules/graphql-ws/dist/client.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/graphql-ws@6.0.5_graphql@16.11.0_ws@8.17.1/node_modules/graphql-ws/dist/common-CGW11Fyb.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/graphql-ws@6.0.5_graphql@16.11.0_ws@8.17.1/node_modules/graphql-ws/dist/common-CGW11Fyb.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   C: () => (/* binding */ CloseCode),\n/* harmony export */   D: () => (/* binding */ DEPRECATED_GRAPHQL_WS_PROTOCOL),\n/* harmony export */   G: () => (/* binding */ GRAPHQL_TRANSPORT_WS_PROTOCOL),\n/* harmony export */   M: () => (/* binding */ MessageType),\n/* harmony export */   a: () => (/* binding */ isAsyncGenerator),\n/* harmony export */   b: () => (/* binding */ isAsyncIterable),\n/* harmony export */   i: () => (/* binding */ isObject),\n/* harmony export */   l: () => (/* binding */ limitCloseReason),\n/* harmony export */   p: () => (/* binding */ parseMessage),\n/* harmony export */   s: () => (/* binding */ stringifyMessage),\n/* harmony export */   v: () => (/* binding */ validateMessage)\n/* harmony export */ });\nfunction extendedTypeof(val) {\n  if (val === null) {\n    return \"null\";\n  }\n  if (Array.isArray(val)) {\n    return \"array\";\n  }\n  return typeof val;\n}\nfunction isObject(val) {\n  return extendedTypeof(val) === \"object\";\n}\nfunction isAsyncIterable(val) {\n  return typeof Object(val)[Symbol.asyncIterator] === \"function\";\n}\nfunction isAsyncGenerator(val) {\n  return isObject(val) && typeof Object(val)[Symbol.asyncIterator] === \"function\" && typeof val.return === \"function\";\n}\nfunction areGraphQLFormattedErrors(obj) {\n  return Array.isArray(obj) && // must be at least one error\n  obj.length > 0 && // error has at least a message\n  obj.every((ob) => \"message\" in ob);\n}\nfunction limitCloseReason(reason, whenTooLong) {\n  return reason.length < 124 ? reason : whenTooLong;\n}\n\nconst GRAPHQL_TRANSPORT_WS_PROTOCOL = \"graphql-transport-ws\";\nconst DEPRECATED_GRAPHQL_WS_PROTOCOL = \"graphql-ws\";\nvar CloseCode = /* @__PURE__ */ ((CloseCode2) => {\n  CloseCode2[CloseCode2[\"InternalServerError\"] = 4500] = \"InternalServerError\";\n  CloseCode2[CloseCode2[\"InternalClientError\"] = 4005] = \"InternalClientError\";\n  CloseCode2[CloseCode2[\"BadRequest\"] = 4400] = \"BadRequest\";\n  CloseCode2[CloseCode2[\"BadResponse\"] = 4004] = \"BadResponse\";\n  CloseCode2[CloseCode2[\"Unauthorized\"] = 4401] = \"Unauthorized\";\n  CloseCode2[CloseCode2[\"Forbidden\"] = 4403] = \"Forbidden\";\n  CloseCode2[CloseCode2[\"SubprotocolNotAcceptable\"] = 4406] = \"SubprotocolNotAcceptable\";\n  CloseCode2[CloseCode2[\"ConnectionInitialisationTimeout\"] = 4408] = \"ConnectionInitialisationTimeout\";\n  CloseCode2[CloseCode2[\"ConnectionAcknowledgementTimeout\"] = 4504] = \"ConnectionAcknowledgementTimeout\";\n  CloseCode2[CloseCode2[\"SubscriberAlreadyExists\"] = 4409] = \"SubscriberAlreadyExists\";\n  CloseCode2[CloseCode2[\"TooManyInitialisationRequests\"] = 4429] = \"TooManyInitialisationRequests\";\n  return CloseCode2;\n})(CloseCode || {});\nvar MessageType = /* @__PURE__ */ ((MessageType2) => {\n  MessageType2[\"ConnectionInit\"] = \"connection_init\";\n  MessageType2[\"ConnectionAck\"] = \"connection_ack\";\n  MessageType2[\"Ping\"] = \"ping\";\n  MessageType2[\"Pong\"] = \"pong\";\n  MessageType2[\"Subscribe\"] = \"subscribe\";\n  MessageType2[\"Next\"] = \"next\";\n  MessageType2[\"Error\"] = \"error\";\n  MessageType2[\"Complete\"] = \"complete\";\n  return MessageType2;\n})(MessageType || {});\nfunction validateMessage(val) {\n  if (!isObject(val)) {\n    throw new Error(\n      `Message is expected to be an object, but got ${extendedTypeof(val)}`\n    );\n  }\n  if (!val.type) {\n    throw new Error(`Message is missing the 'type' property`);\n  }\n  if (typeof val.type !== \"string\") {\n    throw new Error(\n      `Message is expects the 'type' property to be a string, but got ${extendedTypeof(\n        val.type\n      )}`\n    );\n  }\n  switch (val.type) {\n    case \"connection_init\" /* ConnectionInit */:\n    case \"connection_ack\" /* ConnectionAck */:\n    case \"ping\" /* Ping */:\n    case \"pong\" /* Pong */: {\n      if (val.payload != null && !isObject(val.payload)) {\n        throw new Error(\n          `\"${val.type}\" message expects the 'payload' property to be an object or nullish or missing, but got \"${val.payload}\"`\n        );\n      }\n      break;\n    }\n    case \"subscribe\" /* Subscribe */: {\n      if (typeof val.id !== \"string\") {\n        throw new Error(\n          `\"${val.type}\" message expects the 'id' property to be a string, but got ${extendedTypeof(\n            val.id\n          )}`\n        );\n      }\n      if (!val.id) {\n        throw new Error(\n          `\"${val.type}\" message requires a non-empty 'id' property`\n        );\n      }\n      if (!isObject(val.payload)) {\n        throw new Error(\n          `\"${val.type}\" message expects the 'payload' property to be an object, but got ${extendedTypeof(\n            val.payload\n          )}`\n        );\n      }\n      if (typeof val.payload.query !== \"string\") {\n        throw new Error(\n          `\"${val.type}\" message payload expects the 'query' property to be a string, but got ${extendedTypeof(\n            val.payload.query\n          )}`\n        );\n      }\n      if (val.payload.variables != null && !isObject(val.payload.variables)) {\n        throw new Error(\n          `\"${val.type}\" message payload expects the 'variables' property to be a an object or nullish or missing, but got ${extendedTypeof(\n            val.payload.variables\n          )}`\n        );\n      }\n      if (val.payload.operationName != null && extendedTypeof(val.payload.operationName) !== \"string\") {\n        throw new Error(\n          `\"${val.type}\" message payload expects the 'operationName' property to be a string or nullish or missing, but got ${extendedTypeof(\n            val.payload.operationName\n          )}`\n        );\n      }\n      if (val.payload.extensions != null && !isObject(val.payload.extensions)) {\n        throw new Error(\n          `\"${val.type}\" message payload expects the 'extensions' property to be a an object or nullish or missing, but got ${extendedTypeof(\n            val.payload.extensions\n          )}`\n        );\n      }\n      break;\n    }\n    case \"next\" /* Next */: {\n      if (typeof val.id !== \"string\") {\n        throw new Error(\n          `\"${val.type}\" message expects the 'id' property to be a string, but got ${extendedTypeof(\n            val.id\n          )}`\n        );\n      }\n      if (!val.id) {\n        throw new Error(\n          `\"${val.type}\" message requires a non-empty 'id' property`\n        );\n      }\n      if (!isObject(val.payload)) {\n        throw new Error(\n          `\"${val.type}\" message expects the 'payload' property to be an object, but got ${extendedTypeof(\n            val.payload\n          )}`\n        );\n      }\n      break;\n    }\n    case \"error\" /* Error */: {\n      if (typeof val.id !== \"string\") {\n        throw new Error(\n          `\"${val.type}\" message expects the 'id' property to be a string, but got ${extendedTypeof(\n            val.id\n          )}`\n        );\n      }\n      if (!val.id) {\n        throw new Error(\n          `\"${val.type}\" message requires a non-empty 'id' property`\n        );\n      }\n      if (!areGraphQLFormattedErrors(val.payload)) {\n        throw new Error(\n          `\"${val.type}\" message expects the 'payload' property to be an array of GraphQL errors, but got ${JSON.stringify(\n            val.payload\n          )}`\n        );\n      }\n      break;\n    }\n    case \"complete\" /* Complete */: {\n      if (typeof val.id !== \"string\") {\n        throw new Error(\n          `\"${val.type}\" message expects the 'id' property to be a string, but got ${extendedTypeof(\n            val.id\n          )}`\n        );\n      }\n      if (!val.id) {\n        throw new Error(\n          `\"${val.type}\" message requires a non-empty 'id' property`\n        );\n      }\n      break;\n    }\n    default:\n      throw new Error(`Invalid message 'type' property \"${val.type}\"`);\n  }\n  return val;\n}\nfunction parseMessage(data, reviver) {\n  return validateMessage(\n    typeof data === \"string\" ? JSON.parse(data, reviver) : data\n  );\n}\nfunction stringifyMessage(msg, replacer) {\n  validateMessage(msg);\n  return JSON.stringify(msg, replacer);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/graphql-ws@6.0.5_graphql@16.11.0_ws@8.17.1/node_modules/graphql-ws/dist/common-CGW11Fyb.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/.pnpm/graphql-ws@6.0.5_graphql@16.11.0_ws@8.17.1/node_modules/graphql-ws/dist/client.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/graphql-ws@6.0.5_graphql@16.11.0_ws@8.17.1/node_modules/graphql-ws/dist/client.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CloseCode: () => (/* reexport safe */ _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.C),\n/* harmony export */   DEPRECATED_GRAPHQL_WS_PROTOCOL: () => (/* reexport safe */ _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.D),\n/* harmony export */   GRAPHQL_TRANSPORT_WS_PROTOCOL: () => (/* reexport safe */ _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.G),\n/* harmony export */   MessageType: () => (/* reexport safe */ _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.M),\n/* harmony export */   TerminatedCloseEvent: () => (/* binding */ TerminatedCloseEvent),\n/* harmony export */   createClient: () => (/* binding */ createClient),\n/* harmony export */   parseMessage: () => (/* reexport safe */ _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.p),\n/* harmony export */   stringifyMessage: () => (/* reexport safe */ _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.s),\n/* harmony export */   validateMessage: () => (/* reexport safe */ _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.v)\n/* harmony export */ });\n/* harmony import */ var _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common-CGW11Fyb.js */ \"(action-browser)/./node_modules/.pnpm/graphql-ws@6.0.5_graphql@16.11.0_ws@8.17.1/node_modules/graphql-ws/dist/common-CGW11Fyb.js\");\n\n\n\nfunction createClient(options) {\n  const {\n    url,\n    connectionParams,\n    lazy = true,\n    onNonLazyError = console.error,\n    lazyCloseTimeout: lazyCloseTimeoutMs = 0,\n    keepAlive = 0,\n    disablePong,\n    connectionAckWaitTimeout = 0,\n    retryAttempts = 5,\n    retryWait = async function randomisedExponentialBackoff(retries2) {\n      const retryDelaySeconds = Math.pow(2, retries2);\n      await new Promise(\n        (resolve) => setTimeout(\n          resolve,\n          retryDelaySeconds * 1e3 + // add random timeout from 300ms to 3s\n          Math.floor(Math.random() * (3e3 - 300) + 300)\n        )\n      );\n    },\n    shouldRetry = isLikeCloseEvent,\n    on,\n    webSocketImpl,\n    /**\n     * Generates a v4 UUID to be used as the ID using `Math`\n     * as the random number generator. Supply your own generator\n     * in case you need more uniqueness.\n     *\n     * Reference: https://gist.github.com/jed/982883\n     */\n    generateID = function generateUUID() {\n      return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) => {\n        const r = Math.random() * 16 | 0, v = c == \"x\" ? r : r & 3 | 8;\n        return v.toString(16);\n      });\n    },\n    jsonMessageReplacer: replacer,\n    jsonMessageReviver: reviver\n  } = options;\n  let ws;\n  if (webSocketImpl) {\n    if (!isWebSocket(webSocketImpl)) {\n      throw new Error(\"Invalid WebSocket implementation provided\");\n    }\n    ws = webSocketImpl;\n  } else if (typeof WebSocket !== \"undefined\") {\n    ws = WebSocket;\n  } else if (typeof global !== \"undefined\") {\n    ws = global.WebSocket || // @ts-expect-error: Support more browsers\n    global.MozWebSocket;\n  } else if (typeof window !== \"undefined\") {\n    ws = window.WebSocket || // @ts-expect-error: Support more browsers\n    window.MozWebSocket;\n  }\n  if (!ws)\n    throw new Error(\n      \"WebSocket implementation missing; on Node you can `import WebSocket from 'ws';` and pass `webSocketImpl: WebSocket` to `createClient`\"\n    );\n  const WebSocketImpl = ws;\n  const emitter = (() => {\n    const message = /* @__PURE__ */ (() => {\n      const listeners2 = {};\n      return {\n        on(id, listener) {\n          listeners2[id] = listener;\n          return () => {\n            delete listeners2[id];\n          };\n        },\n        emit(message2) {\n          if (\"id\" in message2) listeners2[message2.id]?.(message2);\n        }\n      };\n    })();\n    const listeners = {\n      connecting: on?.connecting ? [on.connecting] : [],\n      opened: on?.opened ? [on.opened] : [],\n      connected: on?.connected ? [on.connected] : [],\n      ping: on?.ping ? [on.ping] : [],\n      pong: on?.pong ? [on.pong] : [],\n      message: on?.message ? [message.emit, on.message] : [message.emit],\n      closed: on?.closed ? [on.closed] : [],\n      error: on?.error ? [on.error] : []\n    };\n    return {\n      onMessage: message.on,\n      on(event, listener) {\n        const l = listeners[event];\n        l.push(listener);\n        return () => {\n          l.splice(l.indexOf(listener), 1);\n        };\n      },\n      emit(event, ...args) {\n        for (const listener of [...listeners[event]]) {\n          listener(...args);\n        }\n      }\n    };\n  })();\n  function errorOrClosed(cb) {\n    const listening = [\n      // errors are fatal and more critical than close events, throw them first\n      emitter.on(\"error\", (err) => {\n        listening.forEach((unlisten) => unlisten());\n        cb(err);\n      }),\n      // closes can be graceful and not fatal, throw them second (if error didnt throw)\n      emitter.on(\"closed\", (event) => {\n        listening.forEach((unlisten) => unlisten());\n        cb(event);\n      })\n    ];\n  }\n  let connecting, locks = 0, lazyCloseTimeout, retrying = false, retries = 0, disposed = false;\n  async function connect() {\n    clearTimeout(lazyCloseTimeout);\n    const [socket, throwOnClose] = await (connecting ?? (connecting = new Promise(\n      (connected, denied) => (async () => {\n        if (retrying) {\n          await retryWait(retries);\n          if (!locks) {\n            connecting = undefined;\n            return denied({ code: 1e3, reason: \"All Subscriptions Gone\" });\n          }\n          retries++;\n        }\n        emitter.emit(\"connecting\", retrying);\n        const socket2 = new WebSocketImpl(\n          typeof url === \"function\" ? await url() : url,\n          _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.G\n        );\n        let connectionAckTimeout, queuedPing;\n        function enqueuePing() {\n          if (isFinite(keepAlive) && keepAlive > 0) {\n            clearTimeout(queuedPing);\n            queuedPing = setTimeout(() => {\n              if (socket2.readyState === WebSocketImpl.OPEN) {\n                socket2.send((0,_common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.s)({ type: _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.M.Ping }));\n                emitter.emit(\"ping\", false, undefined);\n              }\n            }, keepAlive);\n          }\n        }\n        errorOrClosed((errOrEvent) => {\n          connecting = undefined;\n          clearTimeout(connectionAckTimeout);\n          clearTimeout(queuedPing);\n          denied(errOrEvent);\n          if (errOrEvent instanceof TerminatedCloseEvent) {\n            socket2.close(4499, \"Terminated\");\n            socket2.onerror = null;\n            socket2.onclose = null;\n          }\n        });\n        socket2.onerror = (err) => emitter.emit(\"error\", err);\n        socket2.onclose = (event) => emitter.emit(\"closed\", event);\n        socket2.onopen = async () => {\n          try {\n            emitter.emit(\"opened\", socket2);\n            const payload = typeof connectionParams === \"function\" ? await connectionParams() : connectionParams;\n            if (socket2.readyState !== WebSocketImpl.OPEN) return;\n            socket2.send(\n              (0,_common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.s)(\n                payload ? {\n                  type: _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.M.ConnectionInit,\n                  payload\n                } : {\n                  type: _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.M.ConnectionInit\n                  // payload is completely absent if not provided\n                },\n                replacer\n              )\n            );\n            if (isFinite(connectionAckWaitTimeout) && connectionAckWaitTimeout > 0) {\n              connectionAckTimeout = setTimeout(() => {\n                socket2.close(\n                  _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.C.ConnectionAcknowledgementTimeout,\n                  \"Connection acknowledgement timeout\"\n                );\n              }, connectionAckWaitTimeout);\n            }\n            enqueuePing();\n          } catch (err) {\n            emitter.emit(\"error\", err);\n            socket2.close(\n              _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.C.InternalClientError,\n              (0,_common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.l)(\n                err instanceof Error ? err.message : String(err),\n                \"Internal client error\"\n              )\n            );\n          }\n        };\n        let acknowledged = false;\n        socket2.onmessage = ({ data }) => {\n          try {\n            const message = (0,_common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.p)(data, reviver);\n            emitter.emit(\"message\", message);\n            if (message.type === \"ping\" || message.type === \"pong\") {\n              emitter.emit(message.type, true, message.payload);\n              if (message.type === \"pong\") {\n                enqueuePing();\n              } else if (!disablePong) {\n                socket2.send(\n                  (0,_common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.s)(\n                    message.payload ? {\n                      type: _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.M.Pong,\n                      payload: message.payload\n                    } : {\n                      type: _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.M.Pong\n                      // payload is completely absent if not provided\n                    }\n                  )\n                );\n                emitter.emit(\"pong\", false, message.payload);\n              }\n              return;\n            }\n            if (acknowledged) return;\n            if (message.type !== _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.M.ConnectionAck)\n              throw new Error(\n                `First message cannot be of type ${message.type}`\n              );\n            clearTimeout(connectionAckTimeout);\n            acknowledged = true;\n            emitter.emit(\"connected\", socket2, message.payload, retrying);\n            retrying = false;\n            retries = 0;\n            connected([\n              socket2,\n              new Promise((_, reject) => errorOrClosed(reject))\n            ]);\n          } catch (err) {\n            socket2.onmessage = null;\n            emitter.emit(\"error\", err);\n            socket2.close(\n              _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.C.BadResponse,\n              (0,_common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.l)(\n                err instanceof Error ? err.message : String(err),\n                \"Bad response\"\n              )\n            );\n          }\n        };\n      })()\n    )));\n    if (socket.readyState === WebSocketImpl.CLOSING) await throwOnClose;\n    let release = () => {\n    };\n    const released = new Promise((resolve) => release = resolve);\n    return [\n      socket,\n      release,\n      Promise.race([\n        // wait for\n        released.then(() => {\n          if (!locks) {\n            const complete = () => socket.close(1e3, \"Normal Closure\");\n            if (isFinite(lazyCloseTimeoutMs) && lazyCloseTimeoutMs > 0) {\n              lazyCloseTimeout = setTimeout(() => {\n                if (socket.readyState === WebSocketImpl.OPEN) complete();\n              }, lazyCloseTimeoutMs);\n            } else {\n              complete();\n            }\n          }\n        }),\n        // or\n        throwOnClose\n      ])\n    ];\n  }\n  function shouldRetryConnectOrThrow(errOrCloseEvent) {\n    if (isLikeCloseEvent(errOrCloseEvent) && (isFatalInternalCloseCode(errOrCloseEvent.code) || [\n      _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.C.InternalServerError,\n      _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.C.InternalClientError,\n      _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.C.BadRequest,\n      _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.C.BadResponse,\n      _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.C.Unauthorized,\n      // CloseCode.Forbidden, might grant access out after retry\n      _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.C.SubprotocolNotAcceptable,\n      // CloseCode.ConnectionInitialisationTimeout, might not time out after retry\n      // CloseCode.ConnectionAcknowledgementTimeout, might not time out after retry\n      _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.C.SubscriberAlreadyExists,\n      _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.C.TooManyInitialisationRequests\n      // 4499, // Terminated, probably because the socket froze, we want to retry\n    ].includes(errOrCloseEvent.code)))\n      throw errOrCloseEvent;\n    if (disposed) return false;\n    if (isLikeCloseEvent(errOrCloseEvent) && errOrCloseEvent.code === 1e3)\n      return locks > 0;\n    if (!retryAttempts || retries >= retryAttempts) throw errOrCloseEvent;\n    if (!shouldRetry(errOrCloseEvent)) throw errOrCloseEvent;\n    return retrying = true;\n  }\n  if (!lazy) {\n    (async () => {\n      locks++;\n      for (; ; ) {\n        try {\n          const [, , throwOnClose] = await connect();\n          await throwOnClose;\n        } catch (errOrCloseEvent) {\n          try {\n            if (!shouldRetryConnectOrThrow(errOrCloseEvent)) return;\n          } catch (errOrCloseEvent2) {\n            return onNonLazyError?.(errOrCloseEvent2);\n          }\n        }\n      }\n    })();\n  }\n  function subscribe(payload, sink) {\n    const id = generateID(payload);\n    let done = false, errored = false, releaser = () => {\n      locks--;\n      done = true;\n    };\n    (async () => {\n      locks++;\n      for (; ; ) {\n        try {\n          const [socket, release, waitForReleaseOrThrowOnClose] = await connect();\n          if (done) return release();\n          const unlisten = emitter.onMessage(id, (message) => {\n            switch (message.type) {\n              case _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.M.Next: {\n                sink.next(message.payload);\n                return;\n              }\n              case _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.M.Error: {\n                errored = true, done = true;\n                sink.error(message.payload);\n                releaser();\n                return;\n              }\n              case _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.M.Complete: {\n                done = true;\n                releaser();\n                return;\n              }\n            }\n          });\n          socket.send(\n            (0,_common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.s)(\n              {\n                id,\n                type: _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.M.Subscribe,\n                payload\n              },\n              replacer\n            )\n          );\n          releaser = () => {\n            if (!done && socket.readyState === WebSocketImpl.OPEN)\n              socket.send(\n                (0,_common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.s)(\n                  {\n                    id,\n                    type: _common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.M.Complete\n                  },\n                  replacer\n                )\n              );\n            locks--;\n            done = true;\n            release();\n          };\n          await waitForReleaseOrThrowOnClose.finally(unlisten);\n          return;\n        } catch (errOrCloseEvent) {\n          if (!shouldRetryConnectOrThrow(errOrCloseEvent)) return;\n        }\n      }\n    })().then(() => {\n      if (!errored) sink.complete();\n    }).catch((err) => {\n      sink.error(err);\n    });\n    return () => {\n      if (!done) releaser();\n    };\n  }\n  return {\n    on: emitter.on,\n    subscribe,\n    iterate(request) {\n      const pending = [];\n      const deferred = {\n        done: false,\n        error: null,\n        resolve: () => {\n        }\n      };\n      const dispose = subscribe(request, {\n        next(val) {\n          pending.push(val);\n          deferred.resolve();\n        },\n        error(err) {\n          deferred.done = true;\n          deferred.error = err;\n          deferred.resolve();\n        },\n        complete() {\n          deferred.done = true;\n          deferred.resolve();\n        }\n      });\n      const iterator = async function* iterator2() {\n        for (; ; ) {\n          if (!pending.length) {\n            await new Promise((resolve) => deferred.resolve = resolve);\n          }\n          while (pending.length) {\n            yield pending.shift();\n          }\n          if (deferred.error) {\n            throw deferred.error;\n          }\n          if (deferred.done) {\n            return;\n          }\n        }\n      }();\n      iterator.throw = async (err) => {\n        if (!deferred.done) {\n          deferred.done = true;\n          deferred.error = err;\n          deferred.resolve();\n        }\n        return { done: true, value: undefined };\n      };\n      iterator.return = async () => {\n        dispose();\n        return { done: true, value: undefined };\n      };\n      return iterator;\n    },\n    async dispose() {\n      disposed = true;\n      if (connecting) {\n        const [socket] = await connecting;\n        socket.close(1e3, \"Normal Closure\");\n      }\n    },\n    terminate() {\n      if (connecting) {\n        emitter.emit(\"closed\", new TerminatedCloseEvent());\n      }\n    }\n  };\n}\nclass TerminatedCloseEvent extends Error {\n  name = \"TerminatedCloseEvent\";\n  message = \"4499: Terminated\";\n  code = 4499;\n  reason = \"Terminated\";\n  wasClean = false;\n}\nfunction isLikeCloseEvent(val) {\n  return (0,_common_CGW11Fyb_js__WEBPACK_IMPORTED_MODULE_0__.i)(val) && \"code\" in val && \"reason\" in val;\n}\nfunction isFatalInternalCloseCode(code) {\n  if ([\n    1e3,\n    // Normal Closure is not an erroneous close code\n    1001,\n    // Going Away\n    1006,\n    // Abnormal Closure\n    1005,\n    // No Status Received\n    1012,\n    // Service Restart\n    1013,\n    // Try Again Later\n    1014\n    // Bad Gateway\n  ].includes(code))\n    return false;\n  return code >= 1e3 && code <= 1999;\n}\nfunction isWebSocket(val) {\n  return typeof val === \"function\" && \"constructor\" in val && \"CLOSED\" in val && \"CLOSING\" in val && \"CONNECTING\" in val && \"OPEN\" in val;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9ncmFwaHFsLXdzQDYuMC41X2dyYXBocWxAMTYuMTEuMF93c0A4LjE3LjEvbm9kZV9tb2R1bGVzL2dyYXBocWwtd3MvZGlzdC9jbGllbnQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUE0TDtBQUMzRjs7QUFFakc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsNENBQTRDO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0Qiw2Q0FBNkM7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxrREFBNkI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsc0RBQWdCLEdBQUcsTUFBTSxrREFBVyxPQUFPO0FBQ3hFO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLHNEQUFnQjtBQUM5QjtBQUNBLHdCQUF3QixrREFBVztBQUNuQztBQUNBLGtCQUFrQjtBQUNsQix3QkFBd0Isa0RBQVc7QUFDbkM7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGtEQUFTO0FBQzNCO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0EsY0FBYyxrREFBUztBQUN2QixjQUFjLHNEQUFnQjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixNQUFNO0FBQ3JDO0FBQ0EsNEJBQTRCLHNEQUFZO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxrQkFBa0Isc0RBQWdCO0FBQ2xDO0FBQ0EsNEJBQTRCLGtEQUFXO0FBQ3ZDO0FBQ0Esc0JBQXNCO0FBQ3RCLDRCQUE0QixrREFBVztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsa0RBQVc7QUFDNUM7QUFDQSxtREFBbUQsYUFBYTtBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQSxjQUFjLGtEQUFTO0FBQ3ZCLGNBQWMsc0RBQWdCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZixjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxrREFBUztBQUNmLE1BQU0sa0RBQVM7QUFDZixNQUFNLGtEQUFTO0FBQ2YsTUFBTSxrREFBUztBQUNmLE1BQU0sa0RBQVM7QUFDZjtBQUNBLE1BQU0sa0RBQVM7QUFDZjtBQUNBO0FBQ0EsTUFBTSxrREFBUztBQUNmLE1BQU0sa0RBQVM7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixrREFBVztBQUM5QjtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsa0RBQVc7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixrREFBVztBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0EsWUFBWSxzREFBZ0I7QUFDNUI7QUFDQTtBQUNBLHNCQUFzQixrREFBVztBQUNqQztBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isc0RBQWdCO0FBQ2hDO0FBQ0E7QUFDQSwwQkFBMEIsa0RBQVc7QUFDckMsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLHNEQUFRO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFcUkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91aS8uL25vZGVfbW9kdWxlcy8ucG5wbS9ncmFwaHFsLXdzQDYuMC41X2dyYXBocWxAMTYuMTEuMF93c0A4LjE3LjEvbm9kZV9tb2R1bGVzL2dyYXBocWwtd3MvZGlzdC9jbGllbnQuanM/MzBjOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHIGFzIEdSQVBIUUxfVFJBTlNQT1JUX1dTX1BST1RPQ09MLCBzIGFzIHN0cmluZ2lmeU1lc3NhZ2UsIE0gYXMgTWVzc2FnZVR5cGUsIEMgYXMgQ2xvc2VDb2RlLCBsIGFzIGxpbWl0Q2xvc2VSZWFzb24sIHAgYXMgcGFyc2VNZXNzYWdlLCBpIGFzIGlzT2JqZWN0IH0gZnJvbSAnLi9jb21tb24tQ0dXMTFGeWIuanMnO1xuZXhwb3J0IHsgRCBhcyBERVBSRUNBVEVEX0dSQVBIUUxfV1NfUFJPVE9DT0wsIHYgYXMgdmFsaWRhdGVNZXNzYWdlIH0gZnJvbSAnLi9jb21tb24tQ0dXMTFGeWIuanMnO1xuXG5mdW5jdGlvbiBjcmVhdGVDbGllbnQob3B0aW9ucykge1xuICBjb25zdCB7XG4gICAgdXJsLFxuICAgIGNvbm5lY3Rpb25QYXJhbXMsXG4gICAgbGF6eSA9IHRydWUsXG4gICAgb25Ob25MYXp5RXJyb3IgPSBjb25zb2xlLmVycm9yLFxuICAgIGxhenlDbG9zZVRpbWVvdXQ6IGxhenlDbG9zZVRpbWVvdXRNcyA9IDAsXG4gICAga2VlcEFsaXZlID0gMCxcbiAgICBkaXNhYmxlUG9uZyxcbiAgICBjb25uZWN0aW9uQWNrV2FpdFRpbWVvdXQgPSAwLFxuICAgIHJldHJ5QXR0ZW1wdHMgPSA1LFxuICAgIHJldHJ5V2FpdCA9IGFzeW5jIGZ1bmN0aW9uIHJhbmRvbWlzZWRFeHBvbmVudGlhbEJhY2tvZmYocmV0cmllczIpIHtcbiAgICAgIGNvbnN0IHJldHJ5RGVsYXlTZWNvbmRzID0gTWF0aC5wb3coMiwgcmV0cmllczIpO1xuICAgICAgYXdhaXQgbmV3IFByb21pc2UoXG4gICAgICAgIChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KFxuICAgICAgICAgIHJlc29sdmUsXG4gICAgICAgICAgcmV0cnlEZWxheVNlY29uZHMgKiAxZTMgKyAvLyBhZGQgcmFuZG9tIHRpbWVvdXQgZnJvbSAzMDBtcyB0byAzc1xuICAgICAgICAgIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqICgzZTMgLSAzMDApICsgMzAwKVxuICAgICAgICApXG4gICAgICApO1xuICAgIH0sXG4gICAgc2hvdWxkUmV0cnkgPSBpc0xpa2VDbG9zZUV2ZW50LFxuICAgIG9uLFxuICAgIHdlYlNvY2tldEltcGwsXG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIGEgdjQgVVVJRCB0byBiZSB1c2VkIGFzIHRoZSBJRCB1c2luZyBgTWF0aGBcbiAgICAgKiBhcyB0aGUgcmFuZG9tIG51bWJlciBnZW5lcmF0b3IuIFN1cHBseSB5b3VyIG93biBnZW5lcmF0b3JcbiAgICAgKiBpbiBjYXNlIHlvdSBuZWVkIG1vcmUgdW5pcXVlbmVzcy5cbiAgICAgKlxuICAgICAqIFJlZmVyZW5jZTogaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vamVkLzk4Mjg4M1xuICAgICAqL1xuICAgIGdlbmVyYXRlSUQgPSBmdW5jdGlvbiBnZW5lcmF0ZVVVSUQoKSB7XG4gICAgICByZXR1cm4gXCJ4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHhcIi5yZXBsYWNlKC9beHldL2csIChjKSA9PiB7XG4gICAgICAgIGNvbnN0IHIgPSBNYXRoLnJhbmRvbSgpICogMTYgfCAwLCB2ID0gYyA9PSBcInhcIiA/IHIgOiByICYgMyB8IDg7XG4gICAgICAgIHJldHVybiB2LnRvU3RyaW5nKDE2KTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAganNvbk1lc3NhZ2VSZXBsYWNlcjogcmVwbGFjZXIsXG4gICAganNvbk1lc3NhZ2VSZXZpdmVyOiByZXZpdmVyXG4gIH0gPSBvcHRpb25zO1xuICBsZXQgd3M7XG4gIGlmICh3ZWJTb2NrZXRJbXBsKSB7XG4gICAgaWYgKCFpc1dlYlNvY2tldCh3ZWJTb2NrZXRJbXBsKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBXZWJTb2NrZXQgaW1wbGVtZW50YXRpb24gcHJvdmlkZWRcIik7XG4gICAgfVxuICAgIHdzID0gd2ViU29ja2V0SW1wbDtcbiAgfSBlbHNlIGlmICh0eXBlb2YgV2ViU29ja2V0ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgd3MgPSBXZWJTb2NrZXQ7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHdzID0gZ2xvYmFsLldlYlNvY2tldCB8fCAvLyBAdHMtZXhwZWN0LWVycm9yOiBTdXBwb3J0IG1vcmUgYnJvd3NlcnNcbiAgICBnbG9iYWwuTW96V2ViU29ja2V0O1xuICB9IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB3cyA9IHdpbmRvdy5XZWJTb2NrZXQgfHwgLy8gQHRzLWV4cGVjdC1lcnJvcjogU3VwcG9ydCBtb3JlIGJyb3dzZXJzXG4gICAgd2luZG93Lk1veldlYlNvY2tldDtcbiAgfVxuICBpZiAoIXdzKVxuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIFwiV2ViU29ja2V0IGltcGxlbWVudGF0aW9uIG1pc3Npbmc7IG9uIE5vZGUgeW91IGNhbiBgaW1wb3J0IFdlYlNvY2tldCBmcm9tICd3cyc7YCBhbmQgcGFzcyBgd2ViU29ja2V0SW1wbDogV2ViU29ja2V0YCB0byBgY3JlYXRlQ2xpZW50YFwiXG4gICAgKTtcbiAgY29uc3QgV2ViU29ja2V0SW1wbCA9IHdzO1xuICBjb25zdCBlbWl0dGVyID0gKCgpID0+IHtcbiAgICBjb25zdCBtZXNzYWdlID0gLyogQF9fUFVSRV9fICovICgoKSA9PiB7XG4gICAgICBjb25zdCBsaXN0ZW5lcnMyID0ge307XG4gICAgICByZXR1cm4ge1xuICAgICAgICBvbihpZCwgbGlzdGVuZXIpIHtcbiAgICAgICAgICBsaXN0ZW5lcnMyW2lkXSA9IGxpc3RlbmVyO1xuICAgICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBkZWxldGUgbGlzdGVuZXJzMltpZF07XG4gICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgZW1pdChtZXNzYWdlMikge1xuICAgICAgICAgIGlmIChcImlkXCIgaW4gbWVzc2FnZTIpIGxpc3RlbmVyczJbbWVzc2FnZTIuaWRdPy4obWVzc2FnZTIpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pKCk7XG4gICAgY29uc3QgbGlzdGVuZXJzID0ge1xuICAgICAgY29ubmVjdGluZzogb24/LmNvbm5lY3RpbmcgPyBbb24uY29ubmVjdGluZ10gOiBbXSxcbiAgICAgIG9wZW5lZDogb24/Lm9wZW5lZCA/IFtvbi5vcGVuZWRdIDogW10sXG4gICAgICBjb25uZWN0ZWQ6IG9uPy5jb25uZWN0ZWQgPyBbb24uY29ubmVjdGVkXSA6IFtdLFxuICAgICAgcGluZzogb24/LnBpbmcgPyBbb24ucGluZ10gOiBbXSxcbiAgICAgIHBvbmc6IG9uPy5wb25nID8gW29uLnBvbmddIDogW10sXG4gICAgICBtZXNzYWdlOiBvbj8ubWVzc2FnZSA/IFttZXNzYWdlLmVtaXQsIG9uLm1lc3NhZ2VdIDogW21lc3NhZ2UuZW1pdF0sXG4gICAgICBjbG9zZWQ6IG9uPy5jbG9zZWQgPyBbb24uY2xvc2VkXSA6IFtdLFxuICAgICAgZXJyb3I6IG9uPy5lcnJvciA/IFtvbi5lcnJvcl0gOiBbXVxuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgIG9uTWVzc2FnZTogbWVzc2FnZS5vbixcbiAgICAgIG9uKGV2ZW50LCBsaXN0ZW5lcikge1xuICAgICAgICBjb25zdCBsID0gbGlzdGVuZXJzW2V2ZW50XTtcbiAgICAgICAgbC5wdXNoKGxpc3RlbmVyKTtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICBsLnNwbGljZShsLmluZGV4T2YobGlzdGVuZXIpLCAxKTtcbiAgICAgICAgfTtcbiAgICAgIH0sXG4gICAgICBlbWl0KGV2ZW50LCAuLi5hcmdzKSB7XG4gICAgICAgIGZvciAoY29uc3QgbGlzdGVuZXIgb2YgWy4uLmxpc3RlbmVyc1tldmVudF1dKSB7XG4gICAgICAgICAgbGlzdGVuZXIoLi4uYXJncyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9KSgpO1xuICBmdW5jdGlvbiBlcnJvck9yQ2xvc2VkKGNiKSB7XG4gICAgY29uc3QgbGlzdGVuaW5nID0gW1xuICAgICAgLy8gZXJyb3JzIGFyZSBmYXRhbCBhbmQgbW9yZSBjcml0aWNhbCB0aGFuIGNsb3NlIGV2ZW50cywgdGhyb3cgdGhlbSBmaXJzdFxuICAgICAgZW1pdHRlci5vbihcImVycm9yXCIsIChlcnIpID0+IHtcbiAgICAgICAgbGlzdGVuaW5nLmZvckVhY2goKHVubGlzdGVuKSA9PiB1bmxpc3RlbigpKTtcbiAgICAgICAgY2IoZXJyKTtcbiAgICAgIH0pLFxuICAgICAgLy8gY2xvc2VzIGNhbiBiZSBncmFjZWZ1bCBhbmQgbm90IGZhdGFsLCB0aHJvdyB0aGVtIHNlY29uZCAoaWYgZXJyb3IgZGlkbnQgdGhyb3cpXG4gICAgICBlbWl0dGVyLm9uKFwiY2xvc2VkXCIsIChldmVudCkgPT4ge1xuICAgICAgICBsaXN0ZW5pbmcuZm9yRWFjaCgodW5saXN0ZW4pID0+IHVubGlzdGVuKCkpO1xuICAgICAgICBjYihldmVudCk7XG4gICAgICB9KVxuICAgIF07XG4gIH1cbiAgbGV0IGNvbm5lY3RpbmcsIGxvY2tzID0gMCwgbGF6eUNsb3NlVGltZW91dCwgcmV0cnlpbmcgPSBmYWxzZSwgcmV0cmllcyA9IDAsIGRpc3Bvc2VkID0gZmFsc2U7XG4gIGFzeW5jIGZ1bmN0aW9uIGNvbm5lY3QoKSB7XG4gICAgY2xlYXJUaW1lb3V0KGxhenlDbG9zZVRpbWVvdXQpO1xuICAgIGNvbnN0IFtzb2NrZXQsIHRocm93T25DbG9zZV0gPSBhd2FpdCAoY29ubmVjdGluZyA/PyAoY29ubmVjdGluZyA9IG5ldyBQcm9taXNlKFxuICAgICAgKGNvbm5lY3RlZCwgZGVuaWVkKSA9PiAoYXN5bmMgKCkgPT4ge1xuICAgICAgICBpZiAocmV0cnlpbmcpIHtcbiAgICAgICAgICBhd2FpdCByZXRyeVdhaXQocmV0cmllcyk7XG4gICAgICAgICAgaWYgKCFsb2Nrcykge1xuICAgICAgICAgICAgY29ubmVjdGluZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHJldHVybiBkZW5pZWQoeyBjb2RlOiAxZTMsIHJlYXNvbjogXCJBbGwgU3Vic2NyaXB0aW9ucyBHb25lXCIgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHJpZXMrKztcbiAgICAgICAgfVxuICAgICAgICBlbWl0dGVyLmVtaXQoXCJjb25uZWN0aW5nXCIsIHJldHJ5aW5nKTtcbiAgICAgICAgY29uc3Qgc29ja2V0MiA9IG5ldyBXZWJTb2NrZXRJbXBsKFxuICAgICAgICAgIHR5cGVvZiB1cmwgPT09IFwiZnVuY3Rpb25cIiA/IGF3YWl0IHVybCgpIDogdXJsLFxuICAgICAgICAgIEdSQVBIUUxfVFJBTlNQT1JUX1dTX1BST1RPQ09MXG4gICAgICAgICk7XG4gICAgICAgIGxldCBjb25uZWN0aW9uQWNrVGltZW91dCwgcXVldWVkUGluZztcbiAgICAgICAgZnVuY3Rpb24gZW5xdWV1ZVBpbmcoKSB7XG4gICAgICAgICAgaWYgKGlzRmluaXRlKGtlZXBBbGl2ZSkgJiYga2VlcEFsaXZlID4gMCkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHF1ZXVlZFBpbmcpO1xuICAgICAgICAgICAgcXVldWVkUGluZyA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICBpZiAoc29ja2V0Mi5yZWFkeVN0YXRlID09PSBXZWJTb2NrZXRJbXBsLk9QRU4pIHtcbiAgICAgICAgICAgICAgICBzb2NrZXQyLnNlbmQoc3RyaW5naWZ5TWVzc2FnZSh7IHR5cGU6IE1lc3NhZ2VUeXBlLlBpbmcgfSkpO1xuICAgICAgICAgICAgICAgIGVtaXR0ZXIuZW1pdChcInBpbmdcIiwgZmFsc2UsIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIGtlZXBBbGl2ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVycm9yT3JDbG9zZWQoKGVyck9yRXZlbnQpID0+IHtcbiAgICAgICAgICBjb25uZWN0aW5nID0gdW5kZWZpbmVkO1xuICAgICAgICAgIGNsZWFyVGltZW91dChjb25uZWN0aW9uQWNrVGltZW91dCk7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHF1ZXVlZFBpbmcpO1xuICAgICAgICAgIGRlbmllZChlcnJPckV2ZW50KTtcbiAgICAgICAgICBpZiAoZXJyT3JFdmVudCBpbnN0YW5jZW9mIFRlcm1pbmF0ZWRDbG9zZUV2ZW50KSB7XG4gICAgICAgICAgICBzb2NrZXQyLmNsb3NlKDQ0OTksIFwiVGVybWluYXRlZFwiKTtcbiAgICAgICAgICAgIHNvY2tldDIub25lcnJvciA9IG51bGw7XG4gICAgICAgICAgICBzb2NrZXQyLm9uY2xvc2UgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHNvY2tldDIub25lcnJvciA9IChlcnIpID0+IGVtaXR0ZXIuZW1pdChcImVycm9yXCIsIGVycik7XG4gICAgICAgIHNvY2tldDIub25jbG9zZSA9IChldmVudCkgPT4gZW1pdHRlci5lbWl0KFwiY2xvc2VkXCIsIGV2ZW50KTtcbiAgICAgICAgc29ja2V0Mi5vbm9wZW4gPSBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGVtaXR0ZXIuZW1pdChcIm9wZW5lZFwiLCBzb2NrZXQyKTtcbiAgICAgICAgICAgIGNvbnN0IHBheWxvYWQgPSB0eXBlb2YgY29ubmVjdGlvblBhcmFtcyA9PT0gXCJmdW5jdGlvblwiID8gYXdhaXQgY29ubmVjdGlvblBhcmFtcygpIDogY29ubmVjdGlvblBhcmFtcztcbiAgICAgICAgICAgIGlmIChzb2NrZXQyLnJlYWR5U3RhdGUgIT09IFdlYlNvY2tldEltcGwuT1BFTikgcmV0dXJuO1xuICAgICAgICAgICAgc29ja2V0Mi5zZW5kKFxuICAgICAgICAgICAgICBzdHJpbmdpZnlNZXNzYWdlKFxuICAgICAgICAgICAgICAgIHBheWxvYWQgPyB7XG4gICAgICAgICAgICAgICAgICB0eXBlOiBNZXNzYWdlVHlwZS5Db25uZWN0aW9uSW5pdCxcbiAgICAgICAgICAgICAgICAgIHBheWxvYWRcbiAgICAgICAgICAgICAgICB9IDoge1xuICAgICAgICAgICAgICAgICAgdHlwZTogTWVzc2FnZVR5cGUuQ29ubmVjdGlvbkluaXRcbiAgICAgICAgICAgICAgICAgIC8vIHBheWxvYWQgaXMgY29tcGxldGVseSBhYnNlbnQgaWYgbm90IHByb3ZpZGVkXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICByZXBsYWNlclxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKGlzRmluaXRlKGNvbm5lY3Rpb25BY2tXYWl0VGltZW91dCkgJiYgY29ubmVjdGlvbkFja1dhaXRUaW1lb3V0ID4gMCkge1xuICAgICAgICAgICAgICBjb25uZWN0aW9uQWNrVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHNvY2tldDIuY2xvc2UoXG4gICAgICAgICAgICAgICAgICBDbG9zZUNvZGUuQ29ubmVjdGlvbkFja25vd2xlZGdlbWVudFRpbWVvdXQsXG4gICAgICAgICAgICAgICAgICBcIkNvbm5lY3Rpb24gYWNrbm93bGVkZ2VtZW50IHRpbWVvdXRcIlxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH0sIGNvbm5lY3Rpb25BY2tXYWl0VGltZW91dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbnF1ZXVlUGluZygpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgZW1pdHRlci5lbWl0KFwiZXJyb3JcIiwgZXJyKTtcbiAgICAgICAgICAgIHNvY2tldDIuY2xvc2UoXG4gICAgICAgICAgICAgIENsb3NlQ29kZS5JbnRlcm5hbENsaWVudEVycm9yLFxuICAgICAgICAgICAgICBsaW1pdENsb3NlUmVhc29uKFxuICAgICAgICAgICAgICAgIGVyciBpbnN0YW5jZW9mIEVycm9yID8gZXJyLm1lc3NhZ2UgOiBTdHJpbmcoZXJyKSxcbiAgICAgICAgICAgICAgICBcIkludGVybmFsIGNsaWVudCBlcnJvclwiXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBsZXQgYWNrbm93bGVkZ2VkID0gZmFsc2U7XG4gICAgICAgIHNvY2tldDIub25tZXNzYWdlID0gKHsgZGF0YSB9KSA9PiB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBwYXJzZU1lc3NhZ2UoZGF0YSwgcmV2aXZlcik7XG4gICAgICAgICAgICBlbWl0dGVyLmVtaXQoXCJtZXNzYWdlXCIsIG1lc3NhZ2UpO1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2UudHlwZSA9PT0gXCJwaW5nXCIgfHwgbWVzc2FnZS50eXBlID09PSBcInBvbmdcIikge1xuICAgICAgICAgICAgICBlbWl0dGVyLmVtaXQobWVzc2FnZS50eXBlLCB0cnVlLCBtZXNzYWdlLnBheWxvYWQpO1xuICAgICAgICAgICAgICBpZiAobWVzc2FnZS50eXBlID09PSBcInBvbmdcIikge1xuICAgICAgICAgICAgICAgIGVucXVldWVQaW5nKCk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWRpc2FibGVQb25nKSB7XG4gICAgICAgICAgICAgICAgc29ja2V0Mi5zZW5kKFxuICAgICAgICAgICAgICAgICAgc3RyaW5naWZ5TWVzc2FnZShcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5wYXlsb2FkID8ge1xuICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IE1lc3NhZ2VUeXBlLlBvbmcsXG4gICAgICAgICAgICAgICAgICAgICAgcGF5bG9hZDogbWVzc2FnZS5wYXlsb2FkXG4gICAgICAgICAgICAgICAgICAgIH0gOiB7XG4gICAgICAgICAgICAgICAgICAgICAgdHlwZTogTWVzc2FnZVR5cGUuUG9uZ1xuICAgICAgICAgICAgICAgICAgICAgIC8vIHBheWxvYWQgaXMgY29tcGxldGVseSBhYnNlbnQgaWYgbm90IHByb3ZpZGVkXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGVtaXR0ZXIuZW1pdChcInBvbmdcIiwgZmFsc2UsIG1lc3NhZ2UucGF5bG9hZCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFja25vd2xlZGdlZCkgcmV0dXJuO1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2UudHlwZSAhPT0gTWVzc2FnZVR5cGUuQ29ubmVjdGlvbkFjaylcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgIGBGaXJzdCBtZXNzYWdlIGNhbm5vdCBiZSBvZiB0eXBlICR7bWVzc2FnZS50eXBlfWBcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dChjb25uZWN0aW9uQWNrVGltZW91dCk7XG4gICAgICAgICAgICBhY2tub3dsZWRnZWQgPSB0cnVlO1xuICAgICAgICAgICAgZW1pdHRlci5lbWl0KFwiY29ubmVjdGVkXCIsIHNvY2tldDIsIG1lc3NhZ2UucGF5bG9hZCwgcmV0cnlpbmcpO1xuICAgICAgICAgICAgcmV0cnlpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHJpZXMgPSAwO1xuICAgICAgICAgICAgY29ubmVjdGVkKFtcbiAgICAgICAgICAgICAgc29ja2V0MixcbiAgICAgICAgICAgICAgbmV3IFByb21pc2UoKF8sIHJlamVjdCkgPT4gZXJyb3JPckNsb3NlZChyZWplY3QpKVxuICAgICAgICAgICAgXSk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBzb2NrZXQyLm9ubWVzc2FnZSA9IG51bGw7XG4gICAgICAgICAgICBlbWl0dGVyLmVtaXQoXCJlcnJvclwiLCBlcnIpO1xuICAgICAgICAgICAgc29ja2V0Mi5jbG9zZShcbiAgICAgICAgICAgICAgQ2xvc2VDb2RlLkJhZFJlc3BvbnNlLFxuICAgICAgICAgICAgICBsaW1pdENsb3NlUmVhc29uKFxuICAgICAgICAgICAgICAgIGVyciBpbnN0YW5jZW9mIEVycm9yID8gZXJyLm1lc3NhZ2UgOiBTdHJpbmcoZXJyKSxcbiAgICAgICAgICAgICAgICBcIkJhZCByZXNwb25zZVwiXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfSkoKVxuICAgICkpKTtcbiAgICBpZiAoc29ja2V0LnJlYWR5U3RhdGUgPT09IFdlYlNvY2tldEltcGwuQ0xPU0lORykgYXdhaXQgdGhyb3dPbkNsb3NlO1xuICAgIGxldCByZWxlYXNlID0gKCkgPT4ge1xuICAgIH07XG4gICAgY29uc3QgcmVsZWFzZWQgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gcmVsZWFzZSA9IHJlc29sdmUpO1xuICAgIHJldHVybiBbXG4gICAgICBzb2NrZXQsXG4gICAgICByZWxlYXNlLFxuICAgICAgUHJvbWlzZS5yYWNlKFtcbiAgICAgICAgLy8gd2FpdCBmb3JcbiAgICAgICAgcmVsZWFzZWQudGhlbigoKSA9PiB7XG4gICAgICAgICAgaWYgKCFsb2Nrcykge1xuICAgICAgICAgICAgY29uc3QgY29tcGxldGUgPSAoKSA9PiBzb2NrZXQuY2xvc2UoMWUzLCBcIk5vcm1hbCBDbG9zdXJlXCIpO1xuICAgICAgICAgICAgaWYgKGlzRmluaXRlKGxhenlDbG9zZVRpbWVvdXRNcykgJiYgbGF6eUNsb3NlVGltZW91dE1zID4gMCkge1xuICAgICAgICAgICAgICBsYXp5Q2xvc2VUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHNvY2tldC5yZWFkeVN0YXRlID09PSBXZWJTb2NrZXRJbXBsLk9QRU4pIGNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgIH0sIGxhenlDbG9zZVRpbWVvdXRNcyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjb21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSksXG4gICAgICAgIC8vIG9yXG4gICAgICAgIHRocm93T25DbG9zZVxuICAgICAgXSlcbiAgICBdO1xuICB9XG4gIGZ1bmN0aW9uIHNob3VsZFJldHJ5Q29ubmVjdE9yVGhyb3coZXJyT3JDbG9zZUV2ZW50KSB7XG4gICAgaWYgKGlzTGlrZUNsb3NlRXZlbnQoZXJyT3JDbG9zZUV2ZW50KSAmJiAoaXNGYXRhbEludGVybmFsQ2xvc2VDb2RlKGVyck9yQ2xvc2VFdmVudC5jb2RlKSB8fCBbXG4gICAgICBDbG9zZUNvZGUuSW50ZXJuYWxTZXJ2ZXJFcnJvcixcbiAgICAgIENsb3NlQ29kZS5JbnRlcm5hbENsaWVudEVycm9yLFxuICAgICAgQ2xvc2VDb2RlLkJhZFJlcXVlc3QsXG4gICAgICBDbG9zZUNvZGUuQmFkUmVzcG9uc2UsXG4gICAgICBDbG9zZUNvZGUuVW5hdXRob3JpemVkLFxuICAgICAgLy8gQ2xvc2VDb2RlLkZvcmJpZGRlbiwgbWlnaHQgZ3JhbnQgYWNjZXNzIG91dCBhZnRlciByZXRyeVxuICAgICAgQ2xvc2VDb2RlLlN1YnByb3RvY29sTm90QWNjZXB0YWJsZSxcbiAgICAgIC8vIENsb3NlQ29kZS5Db25uZWN0aW9uSW5pdGlhbGlzYXRpb25UaW1lb3V0LCBtaWdodCBub3QgdGltZSBvdXQgYWZ0ZXIgcmV0cnlcbiAgICAgIC8vIENsb3NlQ29kZS5Db25uZWN0aW9uQWNrbm93bGVkZ2VtZW50VGltZW91dCwgbWlnaHQgbm90IHRpbWUgb3V0IGFmdGVyIHJldHJ5XG4gICAgICBDbG9zZUNvZGUuU3Vic2NyaWJlckFscmVhZHlFeGlzdHMsXG4gICAgICBDbG9zZUNvZGUuVG9vTWFueUluaXRpYWxpc2F0aW9uUmVxdWVzdHNcbiAgICAgIC8vIDQ0OTksIC8vIFRlcm1pbmF0ZWQsIHByb2JhYmx5IGJlY2F1c2UgdGhlIHNvY2tldCBmcm96ZSwgd2Ugd2FudCB0byByZXRyeVxuICAgIF0uaW5jbHVkZXMoZXJyT3JDbG9zZUV2ZW50LmNvZGUpKSlcbiAgICAgIHRocm93IGVyck9yQ2xvc2VFdmVudDtcbiAgICBpZiAoZGlzcG9zZWQpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoaXNMaWtlQ2xvc2VFdmVudChlcnJPckNsb3NlRXZlbnQpICYmIGVyck9yQ2xvc2VFdmVudC5jb2RlID09PSAxZTMpXG4gICAgICByZXR1cm4gbG9ja3MgPiAwO1xuICAgIGlmICghcmV0cnlBdHRlbXB0cyB8fCByZXRyaWVzID49IHJldHJ5QXR0ZW1wdHMpIHRocm93IGVyck9yQ2xvc2VFdmVudDtcbiAgICBpZiAoIXNob3VsZFJldHJ5KGVyck9yQ2xvc2VFdmVudCkpIHRocm93IGVyck9yQ2xvc2VFdmVudDtcbiAgICByZXR1cm4gcmV0cnlpbmcgPSB0cnVlO1xuICB9XG4gIGlmICghbGF6eSkge1xuICAgIChhc3luYyAoKSA9PiB7XG4gICAgICBsb2NrcysrO1xuICAgICAgZm9yICg7IDsgKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgWywgLCB0aHJvd09uQ2xvc2VdID0gYXdhaXQgY29ubmVjdCgpO1xuICAgICAgICAgIGF3YWl0IHRocm93T25DbG9zZTtcbiAgICAgICAgfSBjYXRjaCAoZXJyT3JDbG9zZUV2ZW50KSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICghc2hvdWxkUmV0cnlDb25uZWN0T3JUaHJvdyhlcnJPckNsb3NlRXZlbnQpKSByZXR1cm47XG4gICAgICAgICAgfSBjYXRjaCAoZXJyT3JDbG9zZUV2ZW50Mikge1xuICAgICAgICAgICAgcmV0dXJuIG9uTm9uTGF6eUVycm9yPy4oZXJyT3JDbG9zZUV2ZW50Mik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSkoKTtcbiAgfVxuICBmdW5jdGlvbiBzdWJzY3JpYmUocGF5bG9hZCwgc2luaykge1xuICAgIGNvbnN0IGlkID0gZ2VuZXJhdGVJRChwYXlsb2FkKTtcbiAgICBsZXQgZG9uZSA9IGZhbHNlLCBlcnJvcmVkID0gZmFsc2UsIHJlbGVhc2VyID0gKCkgPT4ge1xuICAgICAgbG9ja3MtLTtcbiAgICAgIGRvbmUgPSB0cnVlO1xuICAgIH07XG4gICAgKGFzeW5jICgpID0+IHtcbiAgICAgIGxvY2tzKys7XG4gICAgICBmb3IgKDsgOyApIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCBbc29ja2V0LCByZWxlYXNlLCB3YWl0Rm9yUmVsZWFzZU9yVGhyb3dPbkNsb3NlXSA9IGF3YWl0IGNvbm5lY3QoKTtcbiAgICAgICAgICBpZiAoZG9uZSkgcmV0dXJuIHJlbGVhc2UoKTtcbiAgICAgICAgICBjb25zdCB1bmxpc3RlbiA9IGVtaXR0ZXIub25NZXNzYWdlKGlkLCAobWVzc2FnZSkgPT4ge1xuICAgICAgICAgICAgc3dpdGNoIChtZXNzYWdlLnR5cGUpIHtcbiAgICAgICAgICAgICAgY2FzZSBNZXNzYWdlVHlwZS5OZXh0OiB7XG4gICAgICAgICAgICAgICAgc2luay5uZXh0KG1lc3NhZ2UucGF5bG9hZCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNhc2UgTWVzc2FnZVR5cGUuRXJyb3I6IHtcbiAgICAgICAgICAgICAgICBlcnJvcmVkID0gdHJ1ZSwgZG9uZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgc2luay5lcnJvcihtZXNzYWdlLnBheWxvYWQpO1xuICAgICAgICAgICAgICAgIHJlbGVhc2VyKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNhc2UgTWVzc2FnZVR5cGUuQ29tcGxldGU6IHtcbiAgICAgICAgICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICByZWxlYXNlcigpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHNvY2tldC5zZW5kKFxuICAgICAgICAgICAgc3RyaW5naWZ5TWVzc2FnZShcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgICAgIHR5cGU6IE1lc3NhZ2VUeXBlLlN1YnNjcmliZSxcbiAgICAgICAgICAgICAgICBwYXlsb2FkXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHJlcGxhY2VyXG4gICAgICAgICAgICApXG4gICAgICAgICAgKTtcbiAgICAgICAgICByZWxlYXNlciA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICghZG9uZSAmJiBzb2NrZXQucmVhZHlTdGF0ZSA9PT0gV2ViU29ja2V0SW1wbC5PUEVOKVxuICAgICAgICAgICAgICBzb2NrZXQuc2VuZChcbiAgICAgICAgICAgICAgICBzdHJpbmdpZnlNZXNzYWdlKFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpZCxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogTWVzc2FnZVR5cGUuQ29tcGxldGVcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICByZXBsYWNlclxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGxvY2tzLS07XG4gICAgICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgICAgICAgIHJlbGVhc2UoKTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIGF3YWl0IHdhaXRGb3JSZWxlYXNlT3JUaHJvd09uQ2xvc2UuZmluYWxseSh1bmxpc3Rlbik7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGNhdGNoIChlcnJPckNsb3NlRXZlbnQpIHtcbiAgICAgICAgICBpZiAoIXNob3VsZFJldHJ5Q29ubmVjdE9yVGhyb3coZXJyT3JDbG9zZUV2ZW50KSkgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSkoKS50aGVuKCgpID0+IHtcbiAgICAgIGlmICghZXJyb3JlZCkgc2luay5jb21wbGV0ZSgpO1xuICAgIH0pLmNhdGNoKChlcnIpID0+IHtcbiAgICAgIHNpbmsuZXJyb3IoZXJyKTtcbiAgICB9KTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaWYgKCFkb25lKSByZWxlYXNlcigpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBvbjogZW1pdHRlci5vbixcbiAgICBzdWJzY3JpYmUsXG4gICAgaXRlcmF0ZShyZXF1ZXN0KSB7XG4gICAgICBjb25zdCBwZW5kaW5nID0gW107XG4gICAgICBjb25zdCBkZWZlcnJlZCA9IHtcbiAgICAgICAgZG9uZTogZmFsc2UsXG4gICAgICAgIGVycm9yOiBudWxsLFxuICAgICAgICByZXNvbHZlOiAoKSA9PiB7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBjb25zdCBkaXNwb3NlID0gc3Vic2NyaWJlKHJlcXVlc3QsIHtcbiAgICAgICAgbmV4dCh2YWwpIHtcbiAgICAgICAgICBwZW5kaW5nLnB1c2godmFsKTtcbiAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yKGVycikge1xuICAgICAgICAgIGRlZmVycmVkLmRvbmUgPSB0cnVlO1xuICAgICAgICAgIGRlZmVycmVkLmVycm9yID0gZXJyO1xuICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoKTtcbiAgICAgICAgfSxcbiAgICAgICAgY29tcGxldGUoKSB7XG4gICAgICAgICAgZGVmZXJyZWQuZG9uZSA9IHRydWU7XG4gICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGNvbnN0IGl0ZXJhdG9yID0gYXN5bmMgZnVuY3Rpb24qIGl0ZXJhdG9yMigpIHtcbiAgICAgICAgZm9yICg7IDsgKSB7XG4gICAgICAgICAgaWYgKCFwZW5kaW5nLmxlbmd0aCkge1xuICAgICAgICAgICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IGRlZmVycmVkLnJlc29sdmUgPSByZXNvbHZlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgd2hpbGUgKHBlbmRpbmcubGVuZ3RoKSB7XG4gICAgICAgICAgICB5aWVsZCBwZW5kaW5nLnNoaWZ0KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChkZWZlcnJlZC5lcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgZGVmZXJyZWQuZXJyb3I7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChkZWZlcnJlZC5kb25lKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KCk7XG4gICAgICBpdGVyYXRvci50aHJvdyA9IGFzeW5jIChlcnIpID0+IHtcbiAgICAgICAgaWYgKCFkZWZlcnJlZC5kb25lKSB7XG4gICAgICAgICAgZGVmZXJyZWQuZG9uZSA9IHRydWU7XG4gICAgICAgICAgZGVmZXJyZWQuZXJyb3IgPSBlcnI7XG4gICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiB1bmRlZmluZWQgfTtcbiAgICAgIH07XG4gICAgICBpdGVyYXRvci5yZXR1cm4gPSBhc3luYyAoKSA9PiB7XG4gICAgICAgIGRpc3Bvc2UoKTtcbiAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IHVuZGVmaW5lZCB9O1xuICAgICAgfTtcbiAgICAgIHJldHVybiBpdGVyYXRvcjtcbiAgICB9LFxuICAgIGFzeW5jIGRpc3Bvc2UoKSB7XG4gICAgICBkaXNwb3NlZCA9IHRydWU7XG4gICAgICBpZiAoY29ubmVjdGluZykge1xuICAgICAgICBjb25zdCBbc29ja2V0XSA9IGF3YWl0IGNvbm5lY3Rpbmc7XG4gICAgICAgIHNvY2tldC5jbG9zZSgxZTMsIFwiTm9ybWFsIENsb3N1cmVcIik7XG4gICAgICB9XG4gICAgfSxcbiAgICB0ZXJtaW5hdGUoKSB7XG4gICAgICBpZiAoY29ubmVjdGluZykge1xuICAgICAgICBlbWl0dGVyLmVtaXQoXCJjbG9zZWRcIiwgbmV3IFRlcm1pbmF0ZWRDbG9zZUV2ZW50KCkpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cbmNsYXNzIFRlcm1pbmF0ZWRDbG9zZUV2ZW50IGV4dGVuZHMgRXJyb3Ige1xuICBuYW1lID0gXCJUZXJtaW5hdGVkQ2xvc2VFdmVudFwiO1xuICBtZXNzYWdlID0gXCI0NDk5OiBUZXJtaW5hdGVkXCI7XG4gIGNvZGUgPSA0NDk5O1xuICByZWFzb24gPSBcIlRlcm1pbmF0ZWRcIjtcbiAgd2FzQ2xlYW4gPSBmYWxzZTtcbn1cbmZ1bmN0aW9uIGlzTGlrZUNsb3NlRXZlbnQodmFsKSB7XG4gIHJldHVybiBpc09iamVjdCh2YWwpICYmIFwiY29kZVwiIGluIHZhbCAmJiBcInJlYXNvblwiIGluIHZhbDtcbn1cbmZ1bmN0aW9uIGlzRmF0YWxJbnRlcm5hbENsb3NlQ29kZShjb2RlKSB7XG4gIGlmIChbXG4gICAgMWUzLFxuICAgIC8vIE5vcm1hbCBDbG9zdXJlIGlzIG5vdCBhbiBlcnJvbmVvdXMgY2xvc2UgY29kZVxuICAgIDEwMDEsXG4gICAgLy8gR29pbmcgQXdheVxuICAgIDEwMDYsXG4gICAgLy8gQWJub3JtYWwgQ2xvc3VyZVxuICAgIDEwMDUsXG4gICAgLy8gTm8gU3RhdHVzIFJlY2VpdmVkXG4gICAgMTAxMixcbiAgICAvLyBTZXJ2aWNlIFJlc3RhcnRcbiAgICAxMDEzLFxuICAgIC8vIFRyeSBBZ2FpbiBMYXRlclxuICAgIDEwMTRcbiAgICAvLyBCYWQgR2F0ZXdheVxuICBdLmluY2x1ZGVzKGNvZGUpKVxuICAgIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIGNvZGUgPj0gMWUzICYmIGNvZGUgPD0gMTk5OTtcbn1cbmZ1bmN0aW9uIGlzV2ViU29ja2V0KHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gXCJmdW5jdGlvblwiICYmIFwiY29uc3RydWN0b3JcIiBpbiB2YWwgJiYgXCJDTE9TRURcIiBpbiB2YWwgJiYgXCJDTE9TSU5HXCIgaW4gdmFsICYmIFwiQ09OTkVDVElOR1wiIGluIHZhbCAmJiBcIk9QRU5cIiBpbiB2YWw7XG59XG5cbmV4cG9ydCB7IENsb3NlQ29kZSwgR1JBUEhRTF9UUkFOU1BPUlRfV1NfUFJPVE9DT0wsIE1lc3NhZ2VUeXBlLCBUZXJtaW5hdGVkQ2xvc2VFdmVudCwgY3JlYXRlQ2xpZW50LCBwYXJzZU1lc3NhZ2UsIHN0cmluZ2lmeU1lc3NhZ2UgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/.pnpm/graphql-ws@6.0.5_graphql@16.11.0_ws@8.17.1/node_modules/graphql-ws/dist/client.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/.pnpm/graphql-ws@6.0.5_graphql@16.11.0_ws@8.17.1/node_modules/graphql-ws/dist/common-CGW11Fyb.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/graphql-ws@6.0.5_graphql@16.11.0_ws@8.17.1/node_modules/graphql-ws/dist/common-CGW11Fyb.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   C: () => (/* binding */ CloseCode),\n/* harmony export */   D: () => (/* binding */ DEPRECATED_GRAPHQL_WS_PROTOCOL),\n/* harmony export */   G: () => (/* binding */ GRAPHQL_TRANSPORT_WS_PROTOCOL),\n/* harmony export */   M: () => (/* binding */ MessageType),\n/* harmony export */   a: () => (/* binding */ isAsyncGenerator),\n/* harmony export */   b: () => (/* binding */ isAsyncIterable),\n/* harmony export */   i: () => (/* binding */ isObject),\n/* harmony export */   l: () => (/* binding */ limitCloseReason),\n/* harmony export */   p: () => (/* binding */ parseMessage),\n/* harmony export */   s: () => (/* binding */ stringifyMessage),\n/* harmony export */   v: () => (/* binding */ validateMessage)\n/* harmony export */ });\nfunction extendedTypeof(val) {\n  if (val === null) {\n    return \"null\";\n  }\n  if (Array.isArray(val)) {\n    return \"array\";\n  }\n  return typeof val;\n}\nfunction isObject(val) {\n  return extendedTypeof(val) === \"object\";\n}\nfunction isAsyncIterable(val) {\n  return typeof Object(val)[Symbol.asyncIterator] === \"function\";\n}\nfunction isAsyncGenerator(val) {\n  return isObject(val) && typeof Object(val)[Symbol.asyncIterator] === \"function\" && typeof val.return === \"function\";\n}\nfunction areGraphQLFormattedErrors(obj) {\n  return Array.isArray(obj) && // must be at least one error\n  obj.length > 0 && // error has at least a message\n  obj.every((ob) => \"message\" in ob);\n}\nfunction limitCloseReason(reason, whenTooLong) {\n  return reason.length < 124 ? reason : whenTooLong;\n}\n\nconst GRAPHQL_TRANSPORT_WS_PROTOCOL = \"graphql-transport-ws\";\nconst DEPRECATED_GRAPHQL_WS_PROTOCOL = \"graphql-ws\";\nvar CloseCode = /* @__PURE__ */ ((CloseCode2) => {\n  CloseCode2[CloseCode2[\"InternalServerError\"] = 4500] = \"InternalServerError\";\n  CloseCode2[CloseCode2[\"InternalClientError\"] = 4005] = \"InternalClientError\";\n  CloseCode2[CloseCode2[\"BadRequest\"] = 4400] = \"BadRequest\";\n  CloseCode2[CloseCode2[\"BadResponse\"] = 4004] = \"BadResponse\";\n  CloseCode2[CloseCode2[\"Unauthorized\"] = 4401] = \"Unauthorized\";\n  CloseCode2[CloseCode2[\"Forbidden\"] = 4403] = \"Forbidden\";\n  CloseCode2[CloseCode2[\"SubprotocolNotAcceptable\"] = 4406] = \"SubprotocolNotAcceptable\";\n  CloseCode2[CloseCode2[\"ConnectionInitialisationTimeout\"] = 4408] = \"ConnectionInitialisationTimeout\";\n  CloseCode2[CloseCode2[\"ConnectionAcknowledgementTimeout\"] = 4504] = \"ConnectionAcknowledgementTimeout\";\n  CloseCode2[CloseCode2[\"SubscriberAlreadyExists\"] = 4409] = \"SubscriberAlreadyExists\";\n  CloseCode2[CloseCode2[\"TooManyInitialisationRequests\"] = 4429] = \"TooManyInitialisationRequests\";\n  return CloseCode2;\n})(CloseCode || {});\nvar MessageType = /* @__PURE__ */ ((MessageType2) => {\n  MessageType2[\"ConnectionInit\"] = \"connection_init\";\n  MessageType2[\"ConnectionAck\"] = \"connection_ack\";\n  MessageType2[\"Ping\"] = \"ping\";\n  MessageType2[\"Pong\"] = \"pong\";\n  MessageType2[\"Subscribe\"] = \"subscribe\";\n  MessageType2[\"Next\"] = \"next\";\n  MessageType2[\"Error\"] = \"error\";\n  MessageType2[\"Complete\"] = \"complete\";\n  return MessageType2;\n})(MessageType || {});\nfunction validateMessage(val) {\n  if (!isObject(val)) {\n    throw new Error(\n      `Message is expected to be an object, but got ${extendedTypeof(val)}`\n    );\n  }\n  if (!val.type) {\n    throw new Error(`Message is missing the 'type' property`);\n  }\n  if (typeof val.type !== \"string\") {\n    throw new Error(\n      `Message is expects the 'type' property to be a string, but got ${extendedTypeof(\n        val.type\n      )}`\n    );\n  }\n  switch (val.type) {\n    case \"connection_init\" /* ConnectionInit */:\n    case \"connection_ack\" /* ConnectionAck */:\n    case \"ping\" /* Ping */:\n    case \"pong\" /* Pong */: {\n      if (val.payload != null && !isObject(val.payload)) {\n        throw new Error(\n          `\"${val.type}\" message expects the 'payload' property to be an object or nullish or missing, but got \"${val.payload}\"`\n        );\n      }\n      break;\n    }\n    case \"subscribe\" /* Subscribe */: {\n      if (typeof val.id !== \"string\") {\n        throw new Error(\n          `\"${val.type}\" message expects the 'id' property to be a string, but got ${extendedTypeof(\n            val.id\n          )}`\n        );\n      }\n      if (!val.id) {\n        throw new Error(\n          `\"${val.type}\" message requires a non-empty 'id' property`\n        );\n      }\n      if (!isObject(val.payload)) {\n        throw new Error(\n          `\"${val.type}\" message expects the 'payload' property to be an object, but got ${extendedTypeof(\n            val.payload\n          )}`\n        );\n      }\n      if (typeof val.payload.query !== \"string\") {\n        throw new Error(\n          `\"${val.type}\" message payload expects the 'query' property to be a string, but got ${extendedTypeof(\n            val.payload.query\n          )}`\n        );\n      }\n      if (val.payload.variables != null && !isObject(val.payload.variables)) {\n        throw new Error(\n          `\"${val.type}\" message payload expects the 'variables' property to be a an object or nullish or missing, but got ${extendedTypeof(\n            val.payload.variables\n          )}`\n        );\n      }\n      if (val.payload.operationName != null && extendedTypeof(val.payload.operationName) !== \"string\") {\n        throw new Error(\n          `\"${val.type}\" message payload expects the 'operationName' property to be a string or nullish or missing, but got ${extendedTypeof(\n            val.payload.operationName\n          )}`\n        );\n      }\n      if (val.payload.extensions != null && !isObject(val.payload.extensions)) {\n        throw new Error(\n          `\"${val.type}\" message payload expects the 'extensions' property to be a an object or nullish or missing, but got ${extendedTypeof(\n            val.payload.extensions\n          )}`\n        );\n      }\n      break;\n    }\n    case \"next\" /* Next */: {\n      if (typeof val.id !== \"string\") {\n        throw new Error(\n          `\"${val.type}\" message expects the 'id' property to be a string, but got ${extendedTypeof(\n            val.id\n          )}`\n        );\n      }\n      if (!val.id) {\n        throw new Error(\n          `\"${val.type}\" message requires a non-empty 'id' property`\n        );\n      }\n      if (!isObject(val.payload)) {\n        throw new Error(\n          `\"${val.type}\" message expects the 'payload' property to be an object, but got ${extendedTypeof(\n            val.payload\n          )}`\n        );\n      }\n      break;\n    }\n    case \"error\" /* Error */: {\n      if (typeof val.id !== \"string\") {\n        throw new Error(\n          `\"${val.type}\" message expects the 'id' property to be a string, but got ${extendedTypeof(\n            val.id\n          )}`\n        );\n      }\n      if (!val.id) {\n        throw new Error(\n          `\"${val.type}\" message requires a non-empty 'id' property`\n        );\n      }\n      if (!areGraphQLFormattedErrors(val.payload)) {\n        throw new Error(\n          `\"${val.type}\" message expects the 'payload' property to be an array of GraphQL errors, but got ${JSON.stringify(\n            val.payload\n          )}`\n        );\n      }\n      break;\n    }\n    case \"complete\" /* Complete */: {\n      if (typeof val.id !== \"string\") {\n        throw new Error(\n          `\"${val.type}\" message expects the 'id' property to be a string, but got ${extendedTypeof(\n            val.id\n          )}`\n        );\n      }\n      if (!val.id) {\n        throw new Error(\n          `\"${val.type}\" message requires a non-empty 'id' property`\n        );\n      }\n      break;\n    }\n    default:\n      throw new Error(`Invalid message 'type' property \"${val.type}\"`);\n  }\n  return val;\n}\nfunction parseMessage(data, reviver) {\n  return validateMessage(\n    typeof data === \"string\" ? JSON.parse(data, reviver) : data\n  );\n}\nfunction stringifyMessage(msg, replacer) {\n  validateMessage(msg);\n  return JSON.stringify(msg, replacer);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/.pnpm/graphql-ws@6.0.5_graphql@16.11.0_ws@8.17.1/node_modules/graphql-ws/dist/common-CGW11Fyb.js\n");

/***/ })

};
;